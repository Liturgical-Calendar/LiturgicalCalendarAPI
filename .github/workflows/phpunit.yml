name: PHPUnit

on:
  pull_request:
    branches: [ master, development ]
    paths: [
      '**/*.php',
      'composer.json',
      'composer.lock',
      'phpunit.xml',
      '.env.example',
      'jsondata/**',
      'i18n/**'
    ]
  push:
    branches: [ master, development ]
    paths: [
      '**/*.php',
      'composer.json',
      'composer.lock',
      'phpunit.xml',
      '.env.example',
      'jsondata/**',
      'i18n/**'
    ]
  workflow_dispatch:

concurrency:
  # The ID of the concurrency group. This must be unique to this workflow.
  group: ${{ github.workflow }}-${{ github.ref }}
  # If true, cancel any previous runs in the same concurrency group.
  cancel-in-progress: true

env:
  PHP_VERSION: '8.4'

jobs:
  phpunit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Setup PHP with PECL extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: yaml, intl, zip, calendar, apcu, opcache
          ini-values: apcu.enable_cli=1

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            composer-

      - name: Cache PHPUnit cache
        uses: actions/cache@v4
        with:
          path: .phpunit.cache
          key: phpunit-${{ hashFiles('phpunit.xml') }}
          restore-keys: phpunit-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress

      - name: Enable OPcache
        run: echo "opcache.enable_cli=1" | sudo tee -a /etc/php/${{ env.PHP_VERSION }}/cli/conf.d/99-opcache.ini

      - name: Copy env file
        run: cp .env.example .env.local

      - name: Load env file
        run: |
          set -a
          source .env.local
          set +a
          # Export to GitHub Actions environment
          echo "API_PROTOCOL=$API_PROTOCOL" >> $GITHUB_ENV
          echo "API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "API_PORT=$API_PORT" >> $GITHUB_ENV
          echo "API_BASE_PATH=$API_BASE_PATH" >> $GITHUB_ENV
          echo "APP_ENV=CI" >> $GITHUB_ENV

      - name: Install Nginx + PHP-FPM + gettext + locales
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx php${{ env.PHP_VERSION }}-fpm gettext locales-all

          # disable default nginx site
          sudo rm /etc/nginx/sites-enabled/default

          # use envsubst to inject variables
          cat > app.conf.template <<'EOF'
          server {
              listen ${API_PORT};
              server_name ${API_HOST};
              root $GITHUB_WORKSPACE/public;   # adjust if needed
              index index.php;

              location ${API_BASE_PATH} {
                  try_files $uri /index.php$is_args$args;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php${PHP_VERSION}-fpm.sock;
              }
          }
          EOF

          envsubst '${API_PROTOCOL},${API_HOST},${API_PORT},${API_BASE_PATH},${GITHUB_WORKSPACE},${PHP_VERSION}' < app.conf.template | sudo tee /etc/nginx/sites-available/app.conf
          sudo ln -s /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled/app.conf

          ls -l ${GITHUB_WORKSPACE}
          ls -l ${GITHUB_WORKSPACE}/public
          sudo systemctl restart php${{ env.PHP_VERSION }}-fpm
          sudo systemctl restart nginx

#      - name: Start the PHP web server
#        run: composer start

#      - name: Wait for server PID
#        id: server-check
#        run: |
#          MAX_WAIT=10   # max seconds to wait
#          COUNT=0
#          while [ ! -f server.pid ] && [ $COUNT -lt $MAX_WAIT ]; do
#            sleep 1
#            COUNT=$((COUNT + 1))
#          done
#
#          if [ -f server.pid ]; then
#            echo "Server is running."
#            echo "server_found=true" >> $GITHUB_OUTPUT
#          else
#            echo "Server failed to start within $MAX_WAIT seconds."
#            echo "server_found=false" >> $GITHUB_OUTPUT
#          fi

      - name: Run tests
        run: |
          # sanity check server is up
          curl -sSf "${API_PROTOCOL}://${API_HOST}:${API_PORT}/" > /dev/null
          composer dump-autoload --optimize
          time composer test
